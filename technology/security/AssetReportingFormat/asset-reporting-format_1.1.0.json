{
  "xs:schema": {
    "-xmlns:xs": "http://www.w3.org/2001/XMLSchema",
    "-xmlns:arf": "http://scap.nist.gov/schema/asset-reporting-format/1.1",
    "-xmlns:ai": "http://scap.nist.gov/schema/asset-identification/1.1",
    "-xmlns:core": "http://scap.nist.gov/schema/reporting-core/1.1",
    "-xmlns:xlink": "http://www.w3.org/1999/xlink",
    "-xmlns:dsig": "http://www.w3.org/2000/09/xmldsig#",
    "-targetNamespace": "http://scap.nist.gov/schema/asset-reporting-format/1.1",
    "-elementFormDefault": "qualified",
    "-attributeFormDefault": "unqualified",
    "-version": "1.1.1",
    "xs:annotation": {
      "xs:appinfo": {
        "schema": "Asset Reporting Format",
        "author": "David Waltermire, Adam Halbardier, John Wunder",
        "version": "1.1.1",
        "date": "2012-02-13",
        "sch:schema": {
          "-xmlns:sch": "http://purl.oclc.org/dsdl/schematron",
          "-queryBinding": "xslt2",
          "sch:ns": [
            {
              "-prefix": "xml",
              "-uri": "http://www.w3.org/XML/1998/namespace"
            },
            {
              "-prefix": "xsd",
              "-uri": "http://www.w3.org/2001/XMLSchema"
            },
            {
              "-prefix": "arf",
              "-uri": "http://scap.nist.gov/schema/asset-reporting-format/1.1"
            },
            {
              "-prefix": "core",
              "-uri": "http://scap.nist.gov/schema/reporting-core/1.1"
            },
            {
              "-prefix": "ai",
              "-uri": "http://scap.nist.gov/schema/asset-identification/1.1"
            },
            {
              "-prefix": "fn",
              "-uri": "http://www.w3.org/2005/xpath-functions"
            },
            {
              "-prefix": "xcf",
              "-uri": "nist:scap:arf:xslt:function"
            }
          ],
          "sch:pattern": {
            "sch:let": {
              "-name": "arf-namespace",
              "-value": "string('http://scap.nist.gov/specifications/arf/vocabulary/relationships/1.0#')"
            },
            "sch:rule": [
              {
                "-context": "core:relationship[fn:resolve-QName(@type, current()) eq fn:QName($arf-namespace,'isAbout' )]",
                "sch:assert": [
                  {
                    "-test": "exists(ancestor::arf:asset-report-collection/arf:reports/arf:report[@id eq current()/@subject])",
                    "sch:value-of": { "-select": "xcf:controlled-vocab-error-domain(current(),'report')" }
                  },
                  {
                    "-test": "every $m in core:ref satisfies current()/ancestor::arf:asset-report-collection/arf:assets/arf:asset[@id eq $m]",
                    "sch:value-of": { "-select": "xcf:controlled-vocab-error-range(current(),'asset')" }
                  }
                ]
              },
              {
                "-context": "core:relationship[fn:resolve-QName(@type, current()) eq fn:QName($arf-namespace,'retrievedFrom' )]",
                "sch:assert": [
                  {
                    "-test": "exists(ancestor::arf:asset-report-collection/arf:reports/arf:report[@id eq current()/@subject])",
                    "sch:value-of": { "-select": "xcf:controlled-vocab-error-domain(current(),'report')" }
                  },
                  {
                    "-test": "every $m in core:ref satisfies current()/ancestor::arf:asset-report-collection/arf:assets/arf:asset[@id eq $m]",
                    "sch:value-of": { "-select": "xcf:controlled-vocab-error-range(current(),'asset')" }
                  }
                ]
              },
              {
                "-context": "core:relationship[fn:resolve-QName(@type, current()) eq fn:QName($arf-namespace,'createdBy' )]",
                "sch:assert": [
                  {
                    "-test": "exists(ancestor::arf:asset-report-collection/arf:reports/arf:report[@id eq current()/@subject])",
                    "sch:value-of": { "-select": "xcf:controlled-vocab-error-domain(current(),'report')" }
                  },
                  {
                    "-test": "every $m in core:ref satisfies current()/ancestor::arf:asset-report-collection/arf:assets/arf:asset[@id eq $m]",
                    "sch:value-of": { "-select": "xcf:controlled-vocab-error-range(current(),'asset')" }
                  }
                ]
              },
              {
                "-context": "core:relationship[fn:resolve-QName(@type, current()) eq fn:QName($arf-namespace,'hasSource' )]",
                "sch:assert": [
                  {
                    "-test": "exists(ancestor::arf:asset-report-collection/arf:reports/arf:report[@id eq current()/@subject])",
                    "sch:value-of": { "-select": "xcf:controlled-vocab-error-domain(current(),'report')" }
                  },
                  {
                    "-test": "every $m in core:ref satisfies current()/ancestor::arf:asset-report-collection/arf:assets/arf:asset[@id eq $m]",
                    "sch:value-of": { "-select": "xcf:controlled-vocab-error-range(current(),'asset')" }
                  }
                ]
              },
              {
                "-context": "core:relationship[fn:resolve-QName(@type, current()) eq fn:QName($arf-namespace,'recordedBy' )]",
                "sch:assert": [
                  {
                    "-test": "exists(ancestor::arf:asset-report-collection/arf:reports/arf:report[@id eq current()/@subject])",
                    "sch:value-of": { "-select": "xcf:controlled-vocab-error-domain(current(),'report')" }
                  },
                  {
                    "-test": "every $m in core:ref satisfies current()/ancestor::arf:asset-report-collection/arf:assets/arf:asset[@id eq $m]",
                    "sch:value-of": { "-select": "xcf:controlled-vocab-error-range(current(),'asset')" }
                  }
                ]
              },
              {
                "-context": "core:relationship[fn:resolve-QName(@type, current()) eq fn:QName($arf-namespace,'initiatedBy' )]",
                "sch:assert": [
                  {
                    "-test": "exists(ancestor::arf:asset-report-collection/arf:reports/arf:report[@id eq current()/@subject])",
                    "sch:value-of": { "-select": "xcf:controlled-vocab-error-domain(current(),'report')" }
                  },
                  {
                    "-test": "every $m in core:ref satisfies current()/ancestor::arf:asset-report-collection/arf:assets/arf:asset[@id eq $m]",
                    "sch:value-of": { "-select": "xcf:controlled-vocab-error-range(current(),'asset')" }
                  }
                ]
              },
              {
                "-context": "core:relationship[fn:resolve-QName(@type, current()) eq fn:QName($arf-namespace,'createdFor' )]",
                "sch:assert": [
                  {
                    "-test": "exists(ancestor::arf:asset-report-collection/arf:reports/arf:report[@id eq current()/@subject])",
                    "sch:value-of": { "-select": "xcf:controlled-vocab-error-domain(current(),'report')" }
                  },
                  {
                    "-test": "every $m in core:ref satisfies current()/ancestor::arf:asset-report-collection/arf:report-requests/arf:report-request[@id eq $m]",
                    "sch:value-of": { "-select": "xcf:controlled-vocab-error-range(current(),'report-request')" }
                  }
                ]
              },
              {
                "-context": "core:relationship[fn:resolve-QName(@type, current()) eq fn:QName($arf-namespace,'hasMetadata' )]",
                "sch:assert": [
                  {
                    "-test": "exists(ancestor::arf:asset-report-collection/arf:reports/arf:report[@id eq current()/@subject])",
                    "sch:value-of": { "-select": "xcf:controlled-vocab-error-domain(current(),'report')" }
                  },
                  {
                    "-test": "every $m in core:ref satisfies current()/ancestor::arf:asset-report-collection/arf:reports/arf:report[@id eq $m]",
                    "sch:value-of": { "-select": "xcf:controlled-vocab-error-range(current(),'report')" }
                  }
                ]
              }
            ]
          },
          "xsl:function": [
            {
              "-xmlns:fn": "http://www.w3.org/2005/xpath-functions",
              "-xmlns:xcf": "nist:scap:arf:xslt:function",
              "-xmlns:xsl": "http://www.w3.org/1999/XSL/Transform",
              "-xmlns": "http://www.w3.org/1999/XSL/Transform",
              "-name": "xcf:controlled-vocab-error-domain",
              "xsl:param": [
                { "-name": "node" },
                { "-name": "refName" }
              ],
              "xsl:value-of": { "-select": "concat(concat(concat(concat(string('All @subject attribute in a relationship of type '),namespace-uri-from-QName(resolve-QName($node/@type, $node))),local-name-from-QName(resolve-QName($node/@type, $node))),string(' must reference a ')),$refName)" }
            },
            {
              "-xmlns:fn": "http://www.w3.org/2005/xpath-functions",
              "-xmlns:xcf": "nist:scap:arf:xslt:function",
              "-xmlns:xsl": "http://www.w3.org/1999/XSL/Transform",
              "-xmlns": "http://www.w3.org/1999/XSL/Transform",
              "-name": "xcf:controlled-vocab-error-range",
              "xsl:param": [
                { "-name": "node" },
                { "-name": "refName" }
              ],
              "xsl:value-of": { "-select": "concat(concat(concat(concat(string('All <ref> elements in a relationship of type '),namespace-uri-from-QName(resolve-QName($node/@type, $node))),local-name-from-QName(resolve-QName($node/@type, $node))),string(' must reference a ')),$refName)" }
            }
          ]
        }
      }
    },
    "xs:import": [
      {
        "-namespace": "http://scap.nist.gov/schema/asset-identification/1.1",
        "-schemaLocation": "http://scap.nist.gov/schema/asset-identification/1.1/asset-identification_1.1.0.xsd"
      },
      {
        "-namespace": "http://www.w3.org/1999/xlink",
        "-schemaLocation": "http://www.w3.org/1999/xlink.xsd"
      },
      {
        "-namespace": "http://scap.nist.gov/schema/reporting-core/1.1",
        "-schemaLocation": "http://scap.nist.gov/schema/reporting-core/1.1/reporting-core_1.1.0.xsd"
      }
    ],
    "xs:element": [
      {
        "-name": "asset-report-collection",
        "xs:annotation": { "xs:documentation": "The top-level report element." },
        "xs:complexType": {
          "xs:complexContent": {
            "xs:extension": {
              "-base": "core:relationships-container-type",
              "xs:sequence": {
                "xs:element": [
                  {
                    "-name": "report-requests",
                    "-minOccurs": "0",
                    "xs:annotation": { "xs:documentation": "Contains one or more requests for reports. Each report request must be referenced in a relationship on a report in the same asset-report-collection." },
                    "xs:complexType": {
                      "xs:sequence": {
                        "xs:element": {
                          "-name": "report-request",
                          "-type": "arf:ReportRequestType",
                          "-maxOccurs": "unbounded"
                        }
                      }
                    }
                  },
                  {
                    "-minOccurs": "0",
                    "-name": "assets",
                    "xs:annotation": { "xs:documentation": "Contains the representation of one or more assets represented using the Asset Identification format." },
                    "xs:complexType": {
                      "xs:sequence": {
                        "xs:element": {
                          "-maxOccurs": "unbounded",
                          "-name": "asset",
                          "xs:complexType": {
                            "xs:choice": {
                              "xs:element": [
                                { "-ref": "ai:asset" },
                                { "-ref": "arf:remote-resource" }
                              ]
                            },
                            "xs:attribute": {
                              "-name": "id",
                              "-type": "xs:NCName",
                              "-use": "required",
                              "xs:annotation": { "xs:documentation": "An internal ID to identify this asset." }
                            },
                            "xs:anyAttribute": {
                              "-namespace": "##other",
                              "xs:annotation": {
                                "xs:documentation": "A placeholder so that content creators can add attributes as desired."
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  {
                    "-name": "reports",
                    "xs:annotation": { "xs:documentation": "Contains one or more reports." },
                    "xs:complexType": {
                      "xs:sequence": {
                        "xs:element": {
                          "-name": "report",
                          "-type": "arf:ReportType",
                          "-maxOccurs": "unbounded",
                          "xs:annotation": { "xs:documentation": "Contains a report, which is composed of zero or more relationships and a content payload." }
                        }
                      }
                    }
                  },
                  {
                    "-minOccurs": "0",
                    "-name": "extended-infos",
                    "xs:annotation": { "xs:documentation": "Contain other information elements.  Used as an extension point." },
                    "xs:complexType": {
                      "xs:sequence": {
                        "xs:element": {
                          "-maxOccurs": "unbounded",
                          "-name": "extended-info",
                          "xs:annotation": { "xs:documentation": "Contains other information.  Use as an extension point for data that does not fall into the categories defined in asset-report-collection." },
                          "xs:complexType": {
                            "xs:sequence": {
                              "xs:any": {
                                "-namespace": "##other",
                                "-processContents": "lax"
                              }
                            },
                            "xs:attribute": {
                              "-name": "id",
                              "-type": "xs:NCName",
                              "-use": "required",
                              "xs:annotation": { "xs:documentation": "An internal ID to identify this object." }
                            },
                            "xs:anyAttribute": {
                              "-namespace": "##other",
                              "xs:annotation": { "xs:documentation": "A placeholder so that content creators can add attributes as desired." }
                            }
                          }
                        }
                      }
                    }
                  }
                ]
              },
              "xs:attribute": {
                "-name": "id",
                "-type": "xs:NCName",
                "xs:annotation": { "xs:documentation": "The id for this collection." }
              },
              "xs:anyAttribute": {
                "-namespace": "##other",
                "xs:annotation": { "xs:documentation": "A placeholder so that content creators can add attributes as desired." }
              }
            }
          }
        },
        "xs:key": {
          "-name": "idKey",
          "xs:selector": { "-xpath": ".//arf:report-request|.//arf:asset|.//arf:report|.//arf:extended-info" },
          "xs:field": { "-xpath": "@id" }
        },
        "xs:keyref": [
          {
            "-name": "relSubjKeyRef",
            "-refer": "arf:idKey",
            "xs:selector": { "-xpath": "core:relationships/core:relationship" },
            "xs:field": { "-xpath": "@subject" }
          },
          {
            "-name": "relObjKeyRef",
            "-refer": "arf:idKey",
            "xs:selector": { "-xpath": "core:relationships/core:relationship/core:ref" },
            "xs:field": { "-xpath": "." }
          }
        ]
      },
      {
        "-name": "object-ref",
        "xs:annotation": { "xs:documentation": "Report creators can embedding this element in a report with the @ref_id referencing the ID of an asset, report, or report request.  This element effectively acts as a pointer, allowing content produces to reference higher level ARF constructs in a report, without duplicating the data in that ARF construct." },
        "xs:complexType": {
          "xs:attribute": {
            "-name": "ref-id",
            "-type": "xs:NCName"
          }
        }
      },
      {
        "-name": "remote-resource",
        "xs:annotation": { "xs:documentation": "Links to content stored external to this report." },
        "xs:complexType": {
          "xs:attribute": [
            {
              "-ref": "xlink:type",
              "-use": "required",
              "-fixed": "simple",
              "xs:annotation": { "xs:documentation": "Fixed as a simple XLink." }
            },
            {
              "-ref": "xlink:href",
              "-use": "required",
              "xs:annotation": { "xs:documentation": "A URI to the remote content. Producers and consumers should both know how to resolve the URI in order to be interoperable." }
            }
          ],
          "xs:anyAttribute": {
            "-namespace": "##other",
            "xs:annotation": { "xs:documentation": "A placeholder so that content creators can add attributes as desired." }
          }
        }
      }
    ],
    "xs:complexType": [
      {
        "-name": "ReportRequestType",
        "xs:choice": {
          "xs:element": [
            {
              "-name": "content",
              "xs:annotation": { "xs:documentation": "Contains the content of the report request." },
              "xs:complexType": {
                "xs:sequence": {
                  "xs:any": {
                    "-namespace": "##other",
                    "-processContents": "lax",
                    "xs:annotation": { "xs:documentation": "Holds the content of a report request." }
                  }
                },
                "xs:anyAttribute": {
                  "-namespace": "##other",
                  "xs:annotation": { "xs:documentation": "A placeholder so that content creators can add attributes as desired." }
                }
              }
            },
            { "-ref": "arf:remote-resource" }
          ]
        },
        "xs:attribute": {
          "-name": "id",
          "-type": "xs:NCName",
          "-use": "required",
          "xs:annotation": { "xs:documentation": "An internal ID to identify this report request." }
        },
        "xs:anyAttribute": {
          "-namespace": "##other",
          "xs:annotation": { "xs:documentation": "A placeholder so that content creators can add attributes as desired." }
        }
      },
      {
        "-name": "ReportType",
        "xs:choice": {
          "xs:element": [
            {
              "-name": "content",
              "xs:annotation": { "xs:documentation": "Contains the content of the report." },
              "xs:complexType": {
                "xs:sequence": {
                  "xs:any": {
                    "-namespace": "##other",
                    "-processContents": "lax"
                  }
                },
                "xs:attribute": [
                  {
                    "-name": "data-valid-start-date",
                    "-type": "xs:date"
                  },
                  {
                    "-name": "data-valid-end-date",
                    "-type": "xs:date"
                  }
                ],
                "xs:anyAttribute": {
                  "-namespace": "##other",
                  "xs:annotation": { "xs:documentation": "A placeholder so that content creators can add attributes as desired." }
                }
              }
            },
            { "-ref": "arf:remote-resource" }
          ]
        },
        "xs:attribute": {
          "-name": "id",
          "-type": "xs:NCName",
          "-use": "required",
          "xs:annotation": { "xs:documentation": "An internal ID to identify this report." }
        },
        "xs:anyAttribute": {
          "-namespace": "##other",
          "xs:annotation": { "xs:documentation": "A placeholder so that content creators can add attributes as desired." }
        }
      }
    ]
  }
}
